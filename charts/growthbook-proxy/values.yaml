# Default values for growthbook-proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: growthbook/proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

nodeEnvironment: 'production'

# GrowthBook API key (settings -> api keys)
apiKey: ''
# GrowthBook API instance, default is cloud
apiHost: 'https://api.growthbook.io'
# One of: memory, redis, or mongo
cacheEngine: 'memory'
# The URL of your Redis or Mongo Database
cacheConnectionUrl: ''
# Number of seconds until a cache entry is considered stale (default is 60 = 1 minute)
cacheStaleTtl: '60'
# Number of seconds until a cache entry is expired (default is 600 = 10 minutes)
cacheExpiresTtl: '600'

# Remote Evaluation: true to enable remote evaluation (on by default)
enableRemoteEval: 'true'

# Although we recommend terminating SSL using your load balancer, you can also configure the GrowthBook Proxy to handle SSL termination directly. It supports HTTP/2 by default, which is required for high performance streaming.
useHttp2: true
# The SSL certificate
httpsCert: ''
# The SSL key
httpsKey: ''

maxPayloadSize: '2mb'
verboseDebugging: 'false'

# Redis-specific options for cluster mode:
# (Note that CACHE_CONNECTION_URL is ignored when using cluster mode)
redisCluster:
  enabled: false
  # simple: comma-separated URLs to your cluster seed nodes
  redisRootNodes: ''
  # advanced: JSON array of ClusterNode objects (ioredis)
  redisRootNodesJson:
    {}
  # advanced: JSON object of ClusterOptions (ioredis)
  redisOptionsJson:
    {}

mongoDb:
  enabled: false
  databaseName: ''
  collectionName: ''

# Requires Redis
# For horizontally scaled GrowthBook Proxy clusters, we provide a basic mechanism for keeping your proxy instances in sync, which uses Redis Pub/Sub. To use this feature, you must use Redis as your cache engine and set the following option:
horizontalScaling:
  publishPayloadToChannel: 'false'

# Streaming; enabled by default
streaming:
  enabled: true
  # The maximum duration of a SSE connection before the client is forced to reconnect (default is 60000 = 1 minute)
  maxDuration: 60000
  # The interval between SSE "ping" messages sent to the client (default is 30000 = 30 seconds)
  pingInterval: 30000

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:
  kubernetes.io/arch: amd64
  kubernetes.io/os: linux

tolerations: []

affinity: {}
